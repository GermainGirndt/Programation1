
  //------------------ getSorted  --------------------------------------
  /**
   * Gibt die Artikel im Lager als sortiertes Array zurück. 
   * Das Sortierkriterium wird als Parameter an die Methode übergeben.
   * 
   * @param sortKrit - ein Prädikat-Objekt, welches das Sortierkriterium implementiert  
   * @return ein sortiertes Array der Artikel im Lager 
   */
  public Artikel[] getSorted(BiPredicate<Artikel, Artikel> sortKrit)
    {
     Artikel[] result = lager.clone();

     sort(sortKrit, result);

     return result;
    }
  
  /**
   * Hilfsmethode zum Sortieren eines übergebenen Arrays
   * 
   * @param sortKrit - ein Prädikat-Objekt, welches das Sortierkriterium implementiert
   * @param a - das zu sortierende Array
   */
  private void sort(BiPredicate<Artikel, Artikel> sortKrit, Artikel[] a)
    {
      //Zum Sortieren wird der Bubblesort-Algorithmus verwendet. 
      //Dies ist nicht sehr effizient, jedoch einfach zu implementieren: 
      for (int i=a.length; i>0; i--)
         {
          for (int j=0; j<a.length-1; j++)
	     {
              if (sortKrit.test(a[j],a[j+1]))
	        {
                 swap(j, j+1, a);
                } 
             }
         }
    }
  

//AUFRUFE vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv


	/**
	 * Loest die Aufgabe (c) i.
	 * <br />
	 * Sortierung nach den folgenden Kriterien:
	 * <ol>
	 * 	<li>Unterkategorie (alphabetisch)</li>
	 * 	<li>Bestand</li>
	 * 	<li>Preis</li>
	 * </ol>
	 * @param lager Das Lager mit der unsortierten Artikelliste.
	 * @return Die sortierte Artikelliste.
	 */
	public Artikel[] aufgabe_c_i(Lager lager) 
        {
	   BiPredicate<Artikel, Artikel> sortierkriterium = (Artikel a, Artikel b) ->
	   {
		   //Sortierkriterium 1:
		   BiFunction<Artikel, Artikel, Integer> kriterium1 = (Artikel x, Artikel y) -> 
		   {
			   if (x instanceof Buch) 
			   {
				   if(y instanceof Buch)
					   return 0;
				   else return -1;
			   }
			   else if(x instanceof CD)
			   {
				   if(y instanceof CD)
					   return 0;
				   else if(y instanceof Buch)
					   return 1;
				   else
					   return -1;
			   }
			   else if(x instanceof Video)
			   {
				   if(y instanceof Video)
					   return 0;
				   else return 1;
			   }
			   return 0;
		   };
		   
		   //Alternative für Sortierkriterium 1:
		   BiFunction<Artikel, Artikel, Integer> kriterium1alt = (Artikel x, Artikel y) -> 
		   {
			   //alphabetische Sortierung nach Klassennamen
			   return x.getClass().getName().compareTo(y.getClass().getName());
		   };
		   
		   //Sortierkriterium 2:
		   BiFunction<Artikel, Artikel, Integer> kriterium2 = (Artikel x, Artikel y) -> 
		   {
			   return x.getBestand() - y.getBestand();
		   };
		   
		   //Sortierkriterium 3:
		   BiFunction<Artikel, Artikel, Integer> kriterium3 = (Artikel x, Artikel y) -> 
		   {
			   if(x.getPreis()-y.getPreis() > 0)
				   return 1;
			   else if (x.getPreis()-y.getPreis() < 0)
				   return -1;
			   else 
				   return 0;
		   };

		   int k1 = kriterium1.apply(a, b);
		   if(k1 != 0)
			   return k1 > 0 ? true : false;
		   else
		   {
			   int k2 = kriterium2.apply(a, b);
			   if(k2 != 0)
				   return k2 > 0 ? true : false;
			   else{
				   int k3 = kriterium3.apply(a, b);
				   return k3 >= 0 ? true : false;
			   }
		   }
	   };
	   return lager.getSorted(sortierkriterium);
	}



//ALTERNATIVE vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  //------------------ getSorted  --------------------------------------
  /**
   * Alternative Implementierung der getSorted Methode, 
   * unter Nutzung der sort Methode des List-Interfaces.
   * @param comp - ein Comparator-Objekt zum Vergleich zweier Artikel
   * @return eine sortierte Liste der Artikel im Lager
   */
  public List<Artikel> getSorted(Comparator<Artikel> comp)
    {
      List<Artikel> result = Arrays.asList(lager);

      result.sort(comp);

      return result;
    }
  
  //------------------ swap  --------------------------------------
  /**
   * Hilfsmethode zum Sortieren eines Arrays. Die Methode vertauscht 
   * die beiden Elemente mit den Indizes i und j eines übergebenen Arrays. 
   * 
   * @param i - Index des ersten Elements
   * @param j - Index des zweiten Elements
   * @param a - Array für die Vertauschung 
   */
  private void swap(int i, int j, Artikel[] a)
    {
      Artikel tmp = a[i];
      a[i] = a[j];
      a[j] = tmp;		
    }
